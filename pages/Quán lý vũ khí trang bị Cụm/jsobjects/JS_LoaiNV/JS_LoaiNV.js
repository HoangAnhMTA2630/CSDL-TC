export default {
  async fetchData() {
    let success = false;
    let time_delay = Math.random() * 1000;
    let retryCount = 0;
    const maxRetries = 5;
    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

    while (!success && retryCount < maxRetries) {
      try {
        await SL_TB_NhiemVu.run(); // üëà T√™n function t∆∞∆°ng ·ª©ng v·ªõi truy v·∫•n SQL
        if (SL_TB_NhiemVu.data && SL_TB_NhiemVu.data.length >= 0) {
          success = true;
        } else {
          throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu");
        }
      } catch (error) {
        retryCount++;
        console.log(`Th·ª≠ l·∫°i l·∫ßn ${retryCount}: ${error.message}`);
        await delay(time_delay);
      }
    }

    if (!success) {
      throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu sau nhi·ªÅu l·∫ßn th·ª≠.");
    }

    const dataRows = SL_TB_NhiemVu.data.map(row => ({
      loai: String(row["loai_vu_khi"]),
      count: Number(row["so_luong_thiet_bi"])
    }));

    const labels = dataRows.map(item => item.loai);
    const counts = dataRows.map(item => item.count);

    const options = {
      tooltip: {
        trigger: "axis",
        axisPointer: { type: "shadow" },
        formatter: "{b}: {c} thi·∫øt b·ªã"
      },
      title: {
        text: "Th·ªëng k√™ thi·∫øt b·ªã theo lo·∫°i v≈© kh√≠",
        left: "center",
        textStyle: {
          width: 300,
          overflow: "truncate"
        }
      },
      grid: {
        left: 15,
        right: 15,
        bottom: 30,
        top: 100,
        containLabel: true
      },
      xAxis: [
        {
          type: "category",
          data: labels,
          name: "Lo·∫°i v≈© kh√≠"
        }
      ],
      yAxis: [
        {
          type: "value",
          name: "S·ªë l∆∞·ª£ng thi·∫øt b·ªã",
          minInterval: 1
        }
      ],
      series: [
        {
          name: "Thi·∫øt b·ªã",
          type: "bar",
          data: counts,
          itemStyle: {
            color: "#91cc75"
          }
        }
      ]
    };

    console.log(options);
    return options;
  }
}
