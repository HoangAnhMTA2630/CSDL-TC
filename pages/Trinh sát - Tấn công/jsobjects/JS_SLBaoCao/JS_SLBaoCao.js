export default {
  async fetchData() {
    let success = false;
    let time_delay = Math.random() * 1000;
    let retryCount = 0;
    const maxRetries = 5;
    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

    while (!success && retryCount < maxRetries) {
      try {
        await SLBaoCao.run(); // üëâ Truy v·∫•n Appsmith tr·∫£ v·ªÅ d·ªØ li·ªáu b√°o c√°o theo h∆∞·ªõng
        if (SLBaoCao.data && SLBaoCao.data.length > 0) {
          success = true;
        } else {
          throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu");
        }
      } catch (error) {
        retryCount++;
        console.log(`Th·ª≠ l·∫°i l·∫ßn ${retryCount}: ${error.message}`);
        await delay(time_delay);
      }
    }

    if (!success) {
      throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu sau nhi·ªÅu l·∫ßn th·ª≠.");
    }

    const dataRows = SLBaoCao.data.map(row => ({
      huong: row["ten_huong"] ?? "Kh√¥ng r√µ",
      count: Number(row["so_luong_bao_cao"])
    }));

    const huongs = dataRows.map(item => item.huong);
    const counts = dataRows.map(item => item.count);

    const options = {
      tooltip: {
        trigger: "axis",
        axisPointer: { type: "shadow" },
        formatter: "{b}: {c} b√°o c√°o"
      },
      title: {
        text: "B√°o c√°o",
        left: "center"
      },
      grid: {
        left: 15,
        right: 15,
        bottom: 30,
        top: 100,
        containLabel: true
      },
      xAxis: [
        {
          type: "category",
          data: huongs,
          name: "H∆∞·ªõng"
        }
      ],
      yAxis: [
        {
          type: "value",
          name: "S·ªë l∆∞·ª£ng b√°o c√°o",
          minInterval: 1
        }
      ],
      series: [
        {
          name: "B√°o c√°o",
          type: "bar",
          data: counts,
					label: {
      			show: true,           // üëà Hi·ªÉn th·ªã nh√£n
      			position: "top",      // üëà V·ªã tr√≠ tr√™n ƒë·∫ßu c·ªôt
      			formatter: "{c}"      // üëà Hi·ªÉn th·ªã gi√° tr·ªã y (s·ªë l∆∞·ª£ng)
    				},
          encode: {
            x: "H∆∞·ªõng",
            y: "SL b√°o c√°o"
          }
        }
      ]
    };

    return options;
  }
};
