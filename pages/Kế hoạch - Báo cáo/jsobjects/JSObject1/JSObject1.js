export default {
  transformToTree: () => {
    const rawData = Query1.data;
    const tree = [];

    rawData.forEach(item => {
      const loaiKey = String(item.loai_ke_hoach_id);
      const nam = item.nam;
      const quy = item.quy;
      const thang = item.thang;
      const tuan = item.tuan;
      const boKeHoachId = item.bo_ke_hoach_id;

      // --- 1. C·∫•p Lo·∫°i k·∫ø ho·∫°ch ---
      // Value: LKH_loai_ke_hoach_id
      const loaiValue = `LKH_${loaiKey}`;
      let loaiNode = tree.find(node => node.value === loaiValue);
      if (!loaiNode) {
        loaiNode = {
          label: `üìÅ ${item.ten_loai_ke_hoach}`,
          value: loaiValue,
          children: []
        };
        tree.push(loaiNode);
      }

      // --- 2. C·∫•p NƒÉm ---
      // Value: loaiKey_nam_FOLDER (ƒë·ªÉ ƒë·∫£m b·∫£o duy nh·∫•t cho folder NƒÉm)
      const namFolderValue = `${loaiKey}_${nam}_FOLDER`;
      let namNode = loaiNode.children.find(c => c.value === namFolderValue);
      if (!namNode) {
        namNode = {
          label: `üìÅ NƒÉm ${nam}`,
          value: namFolderValue,
          children: []
        };
        loaiNode.children.push(namNode);
      }

      if (!Array.isArray(namNode.children)) {
        namNode.children = [];
      }

      // --- 3. X·ª≠ l√Ω c√°c c·∫•p ƒë·ªô th·ªùi gian v√† th√™m k·∫ø ho·∫°ch ---
      // Value c·ªßa t·∫•t c·∫£ c√°c node k·∫ø ho·∫°ch c·ª• th·ªÉ (node l√°) s·∫Ω ch·ªâ l√† bo_ke_hoach_id
      const planValue = String(boKeHoachId); // ƒê·∫£m b·∫£o l√† string cho consistency

      if (item.ten_loai_thoi_gian === 'NƒÉm') {
        namNode.children.push({
          label: `üóÉÔ∏è ${item.ten_bo_ke_hoach}`,
          value: planValue // Ch·ªâ l√† ID c·ªßa b·ªô k·∫ø ho·∫°ch
        });
      } else if (item.ten_loai_thoi_gian === 'Qu√Ω') {
        const quyFolderValue = `${loaiKey}_${nam}_${quy}_FOLDER`;
        let quyNode = namNode.children.find(c => c.value === quyFolderValue);

        if (!quyNode) {
          quyNode = {
            label: `üìÅ Qu√Ω ${quy}`,
            value: quyFolderValue,
            children: []
          };
          namNode.children.push(quyNode);
        }

        if (!Array.isArray(quyNode.children)) {
          quyNode.children = [];
        }

        quyNode.children.push({
          label: `üóÉÔ∏è ${item.ten_bo_ke_hoach}`,
          value: planValue // Ch·ªâ l√† ID c·ªßa b·ªô k·∫ø ho·∫°ch
        });

      } else if (item.ten_loai_thoi_gian === 'Th√°ng') {
        const quyFolderValue = `${loaiKey}_${nam}_${quy}_FOLDER`;
        let quyNode = namNode.children.find(c => c.value === quyFolderValue);

        if (!quyNode) {
          quyNode = {
            label: `üìÅ Qu√Ω ${quy}`,
            value: quyFolderValue,
            children: []
          };
          namNode.children.push(quyNode);
        }

        if (!Array.isArray(quyNode.children)) {
          quyNode.children = [];
        }

        const thangFolderValue = `${loaiKey}_${nam}_${quy}_${thang}_FOLDER`;
        let thangNode = quyNode.children.find(c => c.value === thangFolderValue);

        if (!thangNode) {
          thangNode = {
            label: `üìÅ Th√°ng ${thang}`,
            value: thangFolderValue,
            children: []
          };
          quyNode.children.push(thangNode);
        }

        if (!Array.isArray(thangNode.children)) {
          thangNode.children = [];
        }

        thangNode.children.push({
          label: `üóÉÔ∏è ${item.ten_bo_ke_hoach}`,
          value: planValue // Ch·ªâ l√† ID c·ªßa b·ªô k·∫ø ho·∫°ch
        });

      } else if (item.ten_loai_thoi_gian === 'Tu·∫ßn') {
        const quyFolderValue = `${loaiKey}_${nam}_${quy}_FOLDER`;
        let quyNode = namNode.children.find(c => c.value === quyFolderValue);

        if (!quyNode) {
          quyNode = {
            label: `üìÅ Qu√Ω ${quy}`,
            value: quyFolderValue,
            children: []
          };
          namNode.children.push(quyNode);
        }

        if (!Array.isArray(quyNode.children)) {
          quyNode.children = [];
        }

        const thangFolderValue = `${loaiKey}_${nam}_${quy}_${thang}_FOLDER`;
        let thangNode = quyNode.children.find(c => c.value === thangFolderValue);

        if (!thangNode) {
          thangNode = {
            label: `üìÅ Th√°ng ${thang}`,
            value: thangFolderValue,
            children: []
          };
          quyNode.children.push(thangNode);
        }

        if (!Array.isArray(thangNode.children)) {
          thangNode.children = [];
        }

        const tuanFolderValue = `${loaiKey}_${nam}_${quy}_${thang}_${tuan}_FOLDER`;
        let tuanNode = thangNode.children.find(c => c.value === tuanFolderValue);

        if (!tuanNode) {
          tuanNode = {
            label: `üìÅ Tu·∫ßn ${tuan}`,
            value: tuanFolderValue,
            children: []
          };
          thangNode.children.push(tuanNode);
        }

        if (!Array.isArray(tuanNode.children)) {
          tuanNode.children = [];
        }

        tuanNode.children.push({
          label: `üóÉÔ∏è ${item.ten_bo_ke_hoach}`,
          value: planValue // Ch·ªâ l√† ID c·ªßa b·ªô k·∫ø ho·∫°ch
        });
      }
    });

    // --- H√†m s·∫Øp x·∫øp nodes ---
    function sortNodes(nodes) {
        nodes.forEach(node => {
            if (node.children && node.children.length > 0) {
                node.children.sort((a, b) => {
                    const aIsFolder = a.value.endsWith('_FOLDER');
                    const bIsFolder = b.value.endsWith('_FOLDER');

                    // A. Ph√¢n bi·ªát k·∫ø ho·∫°ch nƒÉm v√† c√°c folder
                    // K·∫ø ho·∫°ch nƒÉm (type "NƒÉm") c√≥ value ch·ªâ l√† id (kh√¥ng c√≥ _FOLDER)
                    // v√† n·∫±m tr·ª±c ti·∫øp d∆∞·ªõi node NƒÉm (c√≥ value k·∫øt th√∫c b·∫±ng _FOLDER)
                    // K·∫ø ho·∫°ch kh√°c (Qu√Ω, Th√°ng, Tu·∫ßn) c≈©ng c√≥ value l√† id nh∆∞ng n·∫±m d∆∞·ªõi folder kh√°c
                    // ƒê·ªÉ ∆∞u ti√™n k·∫ø ho·∫°ch nƒÉm l√™n ƒë·∫ßu, ta c·∫ßn ki·ªÉm tra n·∫øu node cha c·ªßa n√≥ l√† node nƒÉm (ch·ª©a _FOLDER)
                    // v√† b·∫£n th√¢n n√≥ kh√¥ng ph·∫£i l√† folder.
                    // ƒê√¢y l√† ph·∫ßn h∆°i ph·ª©c t·∫°p n·∫øu ch·ªâ d·ª±a v√†o value c·ªßa node con.
                    // M·ªôt c√°ch ƒë∆°n gi·∫£n h∆°n l√† g√°n m·ªôt `type` ri√™ng cho "K·∫ø ho·∫°ch nƒÉm" ngay t·ª´ ƒë·∫ßu.
                    // Tuy nhi√™n, v·ªõi c·∫•u tr√∫c hi·ªán t·∫°i, ta c√≥ th·ªÉ d·ª±a v√†o vi·ªác
                    // node kh√¥ng c√≥ suffix _FOLDER v√† node cha c·ªßa n√≥ l√† "NƒÉm" (c√≥ _FOLDER).
                    // V√¨ h√†m sortNodes l√† ƒë·ªá quy, ta kh√¥ng c√≥ tr·ª±c ti·∫øp node cha ·ªü ƒë√¢y.
                    // Do ƒë√≥, ch√∫ng ta s·∫Ω d·ª±a v√†o pattern c·ªßa value.
                    // K·∫ø ho·∫°ch nƒÉm s·∫Ω c√≥ value ch·ªâ l√† ID (v√≠ d·ª• "1"),
                    // c√°c folder c√≥ "_FOLDER", v√† c√°c k·∫ø ho·∫°ch qu√Ω/th√°ng/tu·∫ßn c≈©ng l√† ID.
                    // ƒê·ªÉ l√†m ƒë√∫ng, ta c·∫ßn nh·∫≠n bi·∫øt "K·∫ø ho·∫°ch nƒÉm" trong ng·ªØ c·∫£nh c·ªßa node cha l√† "NƒÉm".

                    // Gi·∫£i ph√°p: K·∫ø ho·∫°ch nƒÉm s·∫Ω c√≥ value ch·ªâ l√† ID (VD: "1", "7", "10"),
                    // c√≤n c√°c folder c√≥ "_FOLDER".
                    // Gi·ªù ta c·∫ßn ∆∞u ti√™n c√°c node con kh√¥ng ph·∫£i folder, v√† value c·ªßa n√≥ l√† duy nh·∫•t.
                    // N·∫øu `a.value` v√† `b.value` ƒë·ªÅu l√† s·ªë (ID c·ªßa b·ªô k·∫ø ho·∫°ch), th√¨ ta kh√¥ng th·ªÉ s·∫Øp x·∫øp ch√∫ng
                    // d·ª±a tr√™n vi·ªác n√≥ c√≥ ph·∫£i l√† "k·∫ø ho·∫°ch nƒÉm" hay kh√¥ng.
                    // V√¨ t·∫•t c·∫£ c√°c k·∫ø ho·∫°ch c·ª• th·ªÉ (nƒÉm, qu√Ω, th√°ng, tu·∫ßn) gi·ªù ƒë·ªÅu c√≥ value l√† ID.

                    // C·∫ßn m·ªôt c√°ch ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i k·∫ø ho·∫°ch (nƒÉm/qu√Ω/th√°ng/tu·∫ßn) t·ª´ node l√°.
                    // N·∫øu kh√¥ng c√≥, th√¨ ch√∫ng ta ch·ªâ c√≥ th·ªÉ s·∫Øp x·∫øp:
                    // 1. C√°c node kh√¥ng ph·∫£i folder (t·ª©c l√† c√°c k·∫ø ho·∫°ch c·ª• th·ªÉ)
                    // 2. C√°c node folder
                    // V√† trong m·ªói nh√≥m, s·∫Øp x·∫øp theo label.

                    // C√¢n nh·∫Øc: li·ªáu c√°c value c·ªßa bo_ke_hoach_id c√≥ tr√πng nhau gi·ªØa c√°c lo·∫°i k·∫ø ho·∫°ch kh√¥ng?
                    // N·∫øu id 1 c√≥ th·ªÉ l√† c·ªßa "K·∫ø ho·∫°ch nƒÉm" v√† id 1 c≈©ng c√≥ th·ªÉ l√† c·ªßa "K·∫ø ho·∫°ch qu√Ω 1",
                    // th√¨ vi·ªác ch·ªâ d√πng ID l√† value s·∫Ω g√¢y ra l·ªói duplicate value.
                    // Gi·∫£ ƒë·ªãnh bo_ke_hoach_id l√† duy nh·∫•t tr√™n to√†n b·ªô t·∫≠p d·ªØ li·ªáu,
                    // v√† kh√¥ng c√≥ k·∫ø ho·∫°ch n√†o c√≥ id tr√πng v·ªõi id lo·∫°i k·∫ø ho·∫°ch (LKH_1...).

                    // N·∫øu b·∫°n *th·ª±c s·ª±* mu·ªën K·∫ø ho·∫°ch nƒÉm l√™n ƒë·∫ßu, r·ªìi m·ªõi ƒë·∫øn c√°c folder Qu√Ω/Th√°ng/Tu·∫ßn,
                    // th√¨ value c·ªßa K·∫ø ho·∫°ch nƒÉm c·∫ßn c√≥ m·ªôt d·∫•u hi·ªáu ri√™ng bi·ªát, ho·∫∑c b·∫°n ph·∫£i truy·ªÅn th√™m th√¥ng tin
                    // cho h√†m sortNodes ƒë·ªÉ n√≥ bi·∫øt node cha l√† g√¨.
                    // C√°ch ƒë∆°n gi·∫£n nh·∫•t ƒë·ªÉ th·ª±c hi·ªán y√™u c·∫ßu n√†y l√†:
                    //   a) K·∫ø ho·∫°ch nƒÉm: th√™m h·∫≠u t·ªë `_YEAR_PLAN` v√†o ID c·ªßa n√≥.
                    //   b) K·∫ø ho·∫°ch qu√Ω/th√°ng/tu·∫ßn: th√™m h·∫≠u t·ªë `_OTHER_PLAN` v√†o ID c·ªßa n√≥.

                    // **S·ª≠a ƒë·ªïi ƒë·ªÉ ∆∞u ti√™n k·∫ø ho·∫°ch nƒÉm:**
                    // Th√™m h·∫≠u t·ªë ƒë·∫∑c bi·ªát cho k·∫ø ho·∫°ch nƒÉm: `boKeHoachId_YEAR_PLAN`
                    // C√°c k·∫ø ho·∫°ch kh√°c: `boKeHoachId_PLAN` (ho·∫∑c kh√¥ng c·∫ßn h·∫≠u t·ªë n·∫øu ID l√† ƒë·ªß duy nh·∫•t)

                    // Quay l·∫°i logic s·∫Øp x·∫øp:
                    const aIsYearPlanNode = (a.label.includes('nƒÉm') && !a.label.includes('qu√Ω') && !a.label.includes('th√°ng') && !a.label.includes('tu·∫ßn') && !aIsFolder);
                    const bIsYearPlanNode = (b.label.includes('nƒÉm') && !b.label.includes('qu√Ω') && !b.label.includes('th√°ng') && !b.label.includes('tu·∫ßn') && !bIsFolder);

                    if (aIsYearPlanNode && !bIsYearPlanNode) return -1;
                    if (!aIsYearPlanNode && bIsYearPlanNode) return 1;

                    // 1. ∆Øu ti√™n c√°c Folder (Qu√Ω, Th√°ng, Tu·∫ßn) sau k·∫ø ho·∫°ch nƒÉm
                    // Note: N·∫øu b·∫°n mu·ªën c√°c k·∫ø ho·∫°ch nƒÉm *lu√¥n lu√¥n* n·∫±m ·ªü ƒë·∫ßu c√πng c·ªßa nƒÉm
                    // v√† c√°c folder Qu√Ω, Th√°ng, Tu·∫ßn sau ƒë√≥, th√¨ ƒëo·∫°n logic n√†y c·∫ßn ƒë∆∞·ª£c tinh ch·ªânh.
                    // V·ªõi `value` ch·ªâ l√† `id` cho c√°c k·∫ø ho·∫°ch, ta kh√¥ng th·ªÉ ph√¢n bi·ªát tr·ª±c ti·∫øp
                    // K·∫ø ho·∫°ch nƒÉm v·ªõi K·∫ø ho·∫°ch qu√Ω/th√°ng/tu·∫ßn *b·∫±ng value*.
                    // Ta ph·∫£i d·ª±a v√†o `label` (kh√¥ng ph·∫£i l√Ω t∆∞·ªüng) ho·∫∑c th√™m l·∫°i th√¥ng tin v√†o `value`.

                    // Gi·ªØ l·∫°i logic s·∫Øp x·∫øp ∆∞u ti√™n folder theo c·∫•p ƒë·ªô v√† s·ªë th·ª© t·ª±
                    // v√† k·∫ø ho·∫°ch nƒÉm ·ªü ƒë·∫ßu (nh∆∞ ƒë√£ s·ª≠a ·ªü tr√™n)
                    // v√† c√°c k·∫ø ho·∫°ch qu√Ω/th√°ng/tu·∫ßn theo label.

                    // S·∫Øp x·∫øp c√°c folder theo c·∫•p ƒë·ªô (Qu√Ω, Th√°ng, Tu·∫ßn)
                    if (aIsFolder && bIsFolder) {
                        const aValueParts = a.value.split('_');
                        const bValueParts = b.value.split('_');
                        // ƒê·ªô s√¢u c·ªßa folder (s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ tr∆∞·ªõc _FOLDER)
                        const aDepth = aValueParts.indexOf('FOLDER');
                        const bDepth = bValueParts.indexOf('FOLDER');

                        if (aDepth < bDepth) return -1; // Qu√Ω (depth 3) tr∆∞·ªõc Th√°ng (depth 4)
                        if (aDepth > bDepth) return 1;

                        // N·∫øu c√πng c·∫•p, s·∫Øp x·∫øp theo s·ªë (Qu√Ω 1, Qu√Ω 2)
                        const aValNum = parseInt(a.label.match(/\d+/)?.[0]);
                        const bValNum = parseInt(b.label.match(/\d+/)?.[0]);
                        if (!isNaN(aValNum) && !isNaN(bValNum)) {
                            return aValNum - bValNum;
                        }
                    }

                    // N·∫øu kh√¥ng ph·∫£i tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát tr√™n, s·∫Øp x·∫øp theo label (b·∫£ng ch·ªØ c√°i)
                    return a.label.localeCompare(b.label);
                });
                sortNodes(node.children); // ƒê·ªá quy s·∫Øp x·∫øp c√°c c·∫•p con
            }
        });
    }

    sortNodes(tree);

    return tree;
  }
};
// export default {
  // transformToTree: () => {
    // const rawData = Query1.data;
    // const tree = [];
// 
    // rawData.forEach(item => {
      // const loaiKey = String(item.loai_ke_hoach_id);
      // const nam = item.nam;
      // const quy = item.quy;
      // const thang = item.thang;
      // const tuan = item.tuan;
      // const boKeHoachId = item.bo_ke_hoach_id;
// 
      // // --- 1. C·∫•p Lo·∫°i k·∫ø ho·∫°ch ---
      // let loaiNode = tree.find(node => node.value === loaiKey);
      // if (!loaiNode) {
        // loaiNode = {
          // label: `üìÅ ${item.ten_loai_ke_hoach}`,
          // value: loaiKey,
          // children: []
        // };
        // tree.push(loaiNode);
      // }
// 
      // // --- 2. C·∫•p NƒÉm ---
      // const namFolderValue = `${loaiKey}_${nam}_FOLDER`;
      // let namNode = loaiNode.children.find(c => c.value === namFolderValue);
      // if (!namNode) {
        // namNode = {
          // label: `üìÅ NƒÉm ${nam}`,
          // value: namFolderValue,
          // children: []
        // };
        // loaiNode.children.push(namNode);
      // }
// 
      // if (!Array.isArray(namNode.children)) {
        // namNode.children = [];
      // }
// 
      // // --- 3. X·ª≠ l√Ω c√°c c·∫•p ƒë·ªô th·ªùi gian v√† th√™m k·∫ø ho·∫°ch ---
      // if (item.ten_loai_thoi_gian === 'NƒÉm') {
        // namNode.children.push({
          // label: item.ten_bo_ke_hoach,
          // value: `${loaiKey}_${nam}_${boKeHoachId}_PLAN`
        // });
      // } else if (item.ten_loai_thoi_gian === 'Qu√Ω') {
        // const quyFolderValue = `${loaiKey}_${nam}_${quy}_FOLDER`;
        // let quyNode = namNode.children.find(c => c.value === quyFolderValue);
// 
        // if (!quyNode) {
          // quyNode = {
            // label: `üìÅ Qu√Ω ${quy}`,
            // value: quyFolderValue,
            // children: []
          // };
          // namNode.children.push(quyNode);
        // }
// 
        // if (!Array.isArray(quyNode.children)) {
          // quyNode.children = [];
        // }
// 
        // quyNode.children.push({
          // label: item.ten_bo_ke_hoach,
          // value: `${loaiKey}_${nam}_${quy}_${boKeHoachId}_PLAN`
        // });
// 
      // } else if (item.ten_loai_thoi_gian === 'Th√°ng') {
        // const quyFolderValue = `${loaiKey}_${nam}_${quy}_FOLDER`;
        // let quyNode = namNode.children.find(c => c.value === quyFolderValue);
// 
        // if (!quyNode) {
          // quyNode = {
            // label: `üìÅ Qu√Ω ${quy}`,
            // value: quyFolderValue,
            // children: []
          // };
          // namNode.children.push(quyNode);
        // }
// 
        // if (!Array.isArray(quyNode.children)) {
          // quyNode.children = [];
        // }
// 
        // const thangFolderValue = `${loaiKey}_${nam}_${quy}_${thang}_FOLDER`;
        // let thangNode = quyNode.children.find(c => c.value === thangFolderValue);
// 
        // if (!thangNode) {
          // thangNode = {
            // label: `üìÅ Th√°ng ${thang}`,
            // value: thangFolderValue,
            // children: []
          // };
          // quyNode.children.push(thangNode);
        // }
// 
        // if (!Array.isArray(thangNode.children)) {
          // thangNode.children = [];
        // }
// 
        // thangNode.children.push({
          // label: item.ten_bo_ke_hoach,
          // value: `${loaiKey}_${nam}_${quy}_${thang}_${boKeHoachId}_PLAN`
        // });
// 
      // } else if (item.ten_loai_thoi_gian === 'Tu·∫ßn') {
        // const quyFolderValue = `${loaiKey}_${nam}_${quy}_FOLDER`;
        // let quyNode = namNode.children.find(c => c.value === quyFolderValue);
// 
        // if (!quyNode) {
          // quyNode = {
            // label: `üìÅ Qu√Ω ${quy}`,
            // value: quyFolderValue,
            // children: []
          // };
          // namNode.children.push(quyNode);
        // }
// 
        // if (!Array.isArray(quyNode.children)) {
          // quyNode.children = [];
        // }
// 
        // const thangFolderValue = `${loaiKey}_${nam}_${quy}_${thang}_FOLDER`;
        // let thangNode = quyNode.children.find(c => c.value === thangFolderValue);
// 
        // if (!thangNode) {
          // thangNode = {
            // label: `üìÅ Th√°ng ${thang}`,
            // value: thangFolderValue,
            // children: []
          // };
          // quyNode.children.push(thangNode);
        // }
// 
        // if (!Array.isArray(thangNode.children)) {
          // thangNode.children = [];
        // }
// 
        // const tuanFolderValue = `${loaiKey}_${nam}_${quy}_${thang}_${tuan}_FOLDER`;
        // let tuanNode = thangNode.children.find(c => c.value === tuanFolderValue);
// 
        // if (!tuanNode) {
          // tuanNode = {
            // label: `üìÅ Tu·∫ßn ${tuan}`,
            // value: tuanFolderValue,
            // children: []
          // };
          // thangNode.children.push(tuanNode);
        // }
// 
        // if (!Array.isArray(tuanNode.children)) {
          // tuanNode.children = [];
        // }
// 
        // tuanNode.children.push({
          // label: item.ten_bo_ke_hoach,
          // value: `${loaiKey}_${nam}_${quy}_${thang}_${tuan}_${boKeHoachId}_PLAN`
        // });
      // }
    // });
// 
    // // --- H√†m s·∫Øp x·∫øp nodes ---
    // function sortNodes(nodes) {
        // nodes.forEach(node => {
            // if (node.children && node.children.length > 0) {
                // node.children.sort((a, b) => {
                    // const aIsPlan = a.value.endsWith('_PLAN');
                    // const bIsPlan = b.value.endsWith('_PLAN');
// 
                    // const aIsFolder = a.value.endsWith('_FOLDER');
                    // const bIsFolder = b.value.endsWith('_FOLDER');
// 
                    // // 1. ∆Øu ti√™n k·∫ø ho·∫°ch nƒÉm l√™n ƒë·∫ßu
                    // // K·∫ø ho·∫°ch nƒÉm c√≥ value d·∫°ng `..._nam_boKeHoachId_PLAN`
                    // // C√°c k·∫ø ho·∫°ch qu√Ω/th√°ng/tu·∫ßn c√≥ value d·∫°ng `..._quy_boKeHoachId_PLAN`, `..._thang_boKeHoachId_PLAN`, `..._tuan_boKeHoachId_PLAN`
                    // // Ch√∫ng ta c·∫ßn m·ªôt c√°ch ƒë·ªÉ nh·∫≠n bi·∫øt k·∫ø ho·∫°ch nƒÉm.
                    // // C√°ch ƒë∆°n gi·∫£n nh·∫•t l√† d·ª±a v√†o ƒë·ªô d√†i value ho·∫∑c s·ªë l∆∞·ª£ng d·∫•u g·∫°ch d∆∞·ªõi,
                    // // ho·∫∑c ch√≠nh x√°c h∆°n l√† ki·ªÉm tra h·∫≠u t·ªë v√† s·ª± hi·ªán di·ªán c·ªßa quy/thang/tuan trong value.
                    // // M·ªôt c√°ch kh√°c l√† ki·ªÉm tra xem n√≥ c√≥ ph·∫£i l√† con tr·ª±c ti·∫øp c·ªßa node NƒÉm hay kh√¥ng.
                    // // Hi·ªán t·∫°i, ch√∫ng ta bi·∫øt r·∫±ng ch·ªâ c√≥ K·∫ø ho·∫°ch nƒÉm ƒë∆∞·ª£c th√™m tr·ª±c ti·∫øp v√†o namNode.children
                    // // m√† kh√¥ng th√¥ng qua quyNode, thangNode, tuanNode.
                    // // V·∫≠y n√™n, ta c√≥ th·ªÉ ph√¢n bi·ªát k·∫ø ho·∫°ch nƒÉm b·∫±ng c√°ch ki·ªÉm tra value c·ªßa n√≥ ch·ªâ ch·ª©a `nam_boKeHoachId_PLAN`.
                    // // Ho·∫∑c ƒë∆°n gi·∫£n h∆°n, n·∫øu l√† PLAN v√† kh√¥ng ph·∫£i l√† FOLDER,
                    // // v√† kh√¥ng c√≥ c√°c d·∫•u hi·ªáu c·ªßa quy/thang/tuan trong value (v√≠ d·ª•: kh√¥ng c√≥ '_FOLDER' v√† kh√¥ng c√≥ '_PLAN' v·ªõi 3 d·∫•u g·∫°ch d∆∞·ªõi tr·ªü l√™n sau ph·∫ßn nƒÉm)
// 
                    // const aIsYearPlan = aIsPlan && a.value.split('_').length === 3 + 1; // loaiKey_nam_boKeHoachId_PLAN
                    // const bIsYearPlan = bIsPlan && b.value.split('_').length === 3 + 1; // loaiKey_nam_boKeHoachId_PLAN
// 
                    // if (aIsYearPlan && !bIsYearPlan) return -1; // a l√† k·∫ø ho·∫°ch nƒÉm, b kh√¥ng ph·∫£i -> a l√™n tr∆∞·ªõc
                    // if (!aIsYearPlan && bIsYearPlan) return 1;  // b l√† k·∫ø ho·∫°ch nƒÉm, a kh√¥ng ph·∫£i -> b l√™n tr∆∞·ªõc
// 
// 
                    // // 2. Ti·∫øp theo l√† c√°c folder (Qu√Ω, Th√°ng, Tu·∫ßn)
                    // if (aIsFolder && !bIsFolder) return -1; // A l√† folder, B kh√¥ng -> A l√™n tr∆∞·ªõc
                    // if (!aIsFolder && bIsFolder) return 1;  // B l√† folder, A kh√¥ng -> B l√™n tr∆∞·ªõc
// 
                    // // N·∫øu c·∫£ hai ƒë·ªÅu l√† folder ho·∫∑c c·∫£ hai ƒë·ªÅu l√† plan (kh√¥ng ph·∫£i year plan)
                    // // S·∫Øp x·∫øp theo s·ªë (Qu√Ω 1, Qu√Ω 2; Th√°ng 1, Th√°ng 2; Tu·∫ßn 1, Tu·∫ßn 2)
                    // if (aIsFolder && bIsFolder) {
                        // const aLevel = a.value.split('_').filter(s => s === 'FOLDER').length;
                        // const bLevel = b.value.split('_').filter(s => s === 'FOLDER').length;
// 
                        // // ∆Øu ti√™n Qu√Ω (√≠t d·∫•u g·∫°ch d∆∞·ªõi h∆°n) -> Th√°ng -> Tu·∫ßn
                        // if (aLevel < bLevel) return -1;
                        // if (aLevel > bLevel) return 1;
// 
                        // // N·∫øu c√πng c·∫•p (c√πng s·ªë d·∫•u g·∫°ch d∆∞·ªõi_FOLDER), s·∫Øp x·∫øp theo s·ªë th·ª© t·ª±
                        // const aValNum = parseInt(a.label.match(/\d+/)?.[0]);
                        // const bValNum = parseInt(b.label.match(/\d+/)?.[0]);
                        // if (!isNaN(aValNum) && !isNaN(bValNum)) {
                            // return aValNum - bValNum;
                        // }
                    // }
// 
                    // // N·∫øu c·∫£ hai ƒë·ªÅu l√† plan (kh√¥ng ph·∫£i year plan), ho·∫∑c kh√¥ng ph·∫£i folder
                    // // S·∫Øp x·∫øp theo label (theo b·∫£ng ch·ªØ c√°i)
                    // return a.label.localeCompare(b.label);
                // });
                // sortNodes(node.children); // ƒê·ªá quy s·∫Øp x·∫øp c√°c c·∫•p con
            // }
        // });
    // }
// 
    // sortNodes(tree);
// 
    // return tree;
  // }
// };
// 
